<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 Pulchritudinous
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * Sample worker configuration.
 *
 * @author Anton Samuelsson <samuelsson.anton@gmail.com>
 */
-->
<config>
    <pulchqueue>
        <worker>
            <unique_worker_name>
                <!-- Any integer equal or greater than 0 -->
                <priority>100</priority>
                <!-- Class path alias -->
                <class>pulchqueue/worker_labour_catalogRule</class>
                <!--
                run     - Run simultaneously in a unique process as other workers with the same name.
                wait    - Waits on previous worker with the same name to be finished before running.
                replace - Replaces any existing non-running scheduled worker with the same worker name.
                ignore  - Check if a worker exists with the same identifier before adding.
                batch   - Will collect other jobs with the same worker name to be run in a single worker.
                -->
                <rule>wait</rule>
                <!-- Add a minimum seconds of delay before the job may be executed -->
                <delay>0</delay>
                <!-- Number of attempts after failure -->
                <attempts>0</attempts>
                <!-- Reschedule the job after an amount of seconds on failure -->
                <reschedule>0</reschedule>
                <!-- Logging destination. The default is pulchqueue.log -->
                <logfile>unique_worker_name.log</logfile>
                <!-- Optional! Add this node jobs that should be run based on a defined schedule -->
                <recurring>
                    <!--
                    Add a helper class to evaluate if the recurring job should run or not.
                    If no class is defied it will be automagically be handled as runnable.
                    -->
                    <helper>pulchqueue/my_helper::myMethod</helper>
                    <!-- Optional! The helper class can also be defined like this. -->
                    <helper>
                        <class>pulchqueue/my_helper</class>
                        <method>myMethod</method>
                    </helper>
                    <!-- Define the cron schedule -->
                    <pattern>*/1 * * * *</pattern>
                </recurring>
            </unique_worker_name>
        </worker>
    </pulchqueue>
</config>

